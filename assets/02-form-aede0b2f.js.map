{"version":3,"file":"02-form-aede0b2f.js","sources":["../../src/02-form.js"],"sourcesContent":["// saving data at local storage\nfunction localStorageSavedData(key, value) {\n    const dataToJSON = JSON.stringify(value);\n    localStorage.setItem(key, dataToJSON);\n  }\n\n// restoring data from local storage\nfunction localStorageRestoredData(key) {\n    const jsonData = localStorage.getItem(key);\n// error processing with *JSON format by using try...catch\ntry {\n    const parsedData = JSON.parse(jsonData);\n        return parsedData;\n    } catch {\n        return jsonData;\n    }\n}\n  \n// preparing form data object\nconst formData = {\n    email: \"\",\n    message: \"\",\n};\n  \n// adding event-listener for local storage states\nconst feedbackFormElement = document.querySelector('.feedback-form');\n\n// local storage's name\nconst feedbackFormState = \"feedback-form-state\";\n  \nfeedbackFormElement.addEventListener('submit', event => {\n    event.preventDefault();\n\n// catching form datas\n    let typedEmail = feedbackFormElement.elements.email.value;\n    let typedMessage = feedbackFormElement.elements.message.value;\n    \n// deleting white characters by .trim() method\n    typedEmail = typedEmail.trim();\n    typedMessage = typedMessage.trim();\n  \n    if (typedEmail === '' || typedMessage === '') {\n        alert(\"Before sending all of fields must be filled up.\");\n        } else {\n        console.log(formData);\n\n// reseting all typing fields from local storage  \n        localStorage.removeItem(feedbackFormState);\n        formData.email = \"\";\n        formData.message = \"\";\n        feedbackFormElement.reset();\n    }\n});\n\n/* preventing typing fields from erasing during refreshing site */\nfeedbackFormElement.addEventListener('input', event => {\n    let typedEmail = feedbackFormElement.elements.email.value;\n    let typedMessage = feedbackFormElement.elements.message.value;\n\n// deleting white characters by .trim() method\n    typedEmail = typedEmail.trim();\n    typedMessage = typedMessage.trim();\n     \n    formData.email = typedEmail;\n    formData.message = typedMessage;\n\n    localStorageSavedData(feedbackFormState, formData);\n});\n  \n  \nconst localStorageBackup = localStorage.getItem(feedbackFormState);\nif (localStorageBackup !== null) {\n    const parsedLocalStorage = JSON.parse(localStorageBackup);\n    feedbackFormElement.elements.email.value = parsedLocalStorage.email;\n    feedbackFormElement.elements.message.value = parsedLocalStorage.message;\n\n    formData.email = parsedLocalStorage.email;\n    formData.message = parsedLocalStorage.message;\n}"],"names":["localStorageSavedData","key","value","dataToJSON","formData","feedbackFormElement","feedbackFormState","event","typedEmail","typedMessage","localStorageBackup","parsedLocalStorage"],"mappings":"AACA,SAASA,EAAsBC,EAAKC,EAAO,CACvC,MAAMC,EAAa,KAAK,UAAUD,CAAK,EACvC,aAAa,QAAQD,EAAKE,CAAU,CACrC,CAeH,MAAMC,EAAW,CACb,MAAO,GACP,QAAS,EACb,EAGMC,EAAsB,SAAS,cAAc,gBAAgB,EAG7DC,EAAoB,sBAE1BD,EAAoB,iBAAiB,SAAUE,GAAS,CACpDA,EAAM,eAAc,EAGpB,IAAIC,EAAaH,EAAoB,SAAS,MAAM,MAChDI,EAAeJ,EAAoB,SAAS,QAAQ,MAGxDG,EAAaA,EAAW,OACxBC,EAAeA,EAAa,OAExBD,IAAe,IAAMC,IAAiB,GACtC,MAAM,iDAAiD,GAEvD,QAAQ,IAAIL,CAAQ,EAGpB,aAAa,WAAWE,CAAiB,EACzCF,EAAS,MAAQ,GACjBA,EAAS,QAAU,GACnBC,EAAoB,MAAK,EAEjC,CAAC,EAGDA,EAAoB,iBAAiB,QAASE,GAAS,CACnD,IAAIC,EAAaH,EAAoB,SAAS,MAAM,MAChDI,EAAeJ,EAAoB,SAAS,QAAQ,MAGxDG,EAAaA,EAAW,OACxBC,EAAeA,EAAa,OAE5BL,EAAS,MAAQI,EACjBJ,EAAS,QAAUK,EAEnBT,EAAsBM,EAAmBF,CAAQ,CACrD,CAAC,EAGD,MAAMM,EAAqB,aAAa,QAAQJ,CAAiB,EACjE,GAAII,IAAuB,KAAM,CAC7B,MAAMC,EAAqB,KAAK,MAAMD,CAAkB,EACxDL,EAAoB,SAAS,MAAM,MAAQM,EAAmB,MAC9DN,EAAoB,SAAS,QAAQ,MAAQM,EAAmB,QAEhEP,EAAS,MAAQO,EAAmB,MACpCP,EAAS,QAAUO,EAAmB,OAC1C"}